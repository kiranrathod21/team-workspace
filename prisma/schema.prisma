// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init





generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  password      String
  role          Role            @default(MEMBER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  memberships   Membership[]
  // ðŸ”¹ Each user can own multiple workspaces
  ownedWorkspaces Workspace[]   @relation("WorkspaceOwner")
  // ðŸ”¹ Each user can be part of multiple projects (through memberships)
  projects      Project[]       @relation("ProjectMembers")
  // ðŸ”¹ Each user can upload multiple files
  uploadedFiles File[]          @relation("FileUploader")
  refreshTokens RefreshToken[]
}

model Workspace {
  id           String       @id @default(uuid())
  name         String
  description  String?
  ownerId      String

  owner        User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  projects     Project[]
  memberships  Membership[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String?
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  members      User[]        @relation("ProjectMembers")
  assignments  Membership[]  @relation("ProjectAssignments") 
  files        File[]
}

model Membership {
  id            String        @id @default(uuid())
  userId        String
  workspaceId   String
  projectId     String?     
  role          WorkspaceRole @default(MEMBER)
  createdAt     DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id])
  workspace     Workspace     @relation(fields: [workspaceId], references: [id])
  project       Project?      @relation("ProjectAssignments", fields: [projectId], references: [id]) 

  @@unique([userId, workspaceId])
}

model File {
  id          String   @id @default(uuid())
  filename    String
  path        String
  mimetype    String
  size        Int
  uploaderId  String
  uploader    User     @relation("FileUploader", fields: [uploaderId], references: [id])
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

enum Role {
  ADMIN
  MEMBER
}

enum WorkspaceRole {
  ADMIN
  MEMBER
}
